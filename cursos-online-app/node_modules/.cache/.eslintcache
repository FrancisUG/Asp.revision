[{"C:\\ProyectoCoreb\\cursos-online-app\\src\\index.js":"1","C:\\ProyectoCoreb\\cursos-online-app\\src\\App.js":"2","C:\\ProyectoCoreb\\cursos-online-app\\src\\reportWebVitals.js":"3","C:\\ProyectoCoreb\\cursos-online-app\\src\\theme\\theme.js":"4","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\seguridad\\RegistrarUsuario.js":"5","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\Tool\\Style.js":"6","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\seguridad\\Login.js":"7","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\seguridad\\PerfilUsuario.js":"8","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\tool\\Style.js":"9","C:\\ProyectoCoreb\\cursos-online-app\\src\\actions\\UsuarioAction.js":"10","C:\\ProyectoCoreb\\cursos-online-app\\src\\servicios\\HttpCliente.js":"11","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\navegacion\\AppNavbar.js":"12","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\navegacion\\bar\\BarSesion.js":"13","C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\store.js":"14","C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\initialState.js":"15","C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\reducers\\index.js":"16","C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\reducers\\sesionUsuarioReducer.js":"17","C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\reducers\\openSnackbarReducer.js":"18"},{"size":1423,"mtime":1633731311568,"results":"19","hashOfConfig":"20"},{"size":5273,"mtime":1633723490011,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":385,"mtime":1628099682609,"results":"23","hashOfConfig":"20"},{"size":6385,"mtime":1633722173177,"results":"24","hashOfConfig":"20"},{"size":769,"mtime":1628022564786,"results":"25","hashOfConfig":"20"},{"size":2967,"mtime":1633715430572,"results":"26","hashOfConfig":"20"},{"size":6153,"mtime":1633716312970,"results":"27","hashOfConfig":"20"},{"size":769,"mtime":1628022564786,"results":"28","hashOfConfig":"20"},{"size":3836,"mtime":1633714470448,"results":"29","hashOfConfig":"20"},{"size":1346,"mtime":1628470655324,"results":"30","hashOfConfig":"20"},{"size":596,"mtime":1633715098951,"results":"31","hashOfConfig":"20"},{"size":2446,"mtime":1633714768043,"results":"32","hashOfConfig":"20"},{"size":896,"mtime":1631745258385,"results":"33","hashOfConfig":"20"},{"size":33,"mtime":1631816393506,"results":"34","hashOfConfig":"20"},{"size":646,"mtime":1633722458615,"results":"35","hashOfConfig":"20"},{"size":1982,"mtime":1633722714242,"results":"36","hashOfConfig":"20"},{"size":692,"mtime":1632188786609,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ag28i7",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\ProyectoCoreb\\cursos-online-app\\src\\index.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\App.js",["80"],"import React, { useEffect, useState } from \"react\";\nimport { ThemeProvider as MuithemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./theme/theme\";\nimport PerfilUsuario from \"./componentes/seguridad/PerfilUsuario\";\nimport Login from \"./componentes/seguridad/Login\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport RegistrarUsuario from \"./componentes/seguridad/RegistrarUsuario\";\nimport { Grid, Snackbar } from \"@material-ui/core\";\nimport AppNavbar from \"./componentes/navegacion/AppNavbar\";\nimport { useStateValue } from \"./contexto/store\";\nimport { obtenerUsuarioActual } from \"./actions/UsuarioAction\";\n\n//import { BrowserRouter as Router, Switch, Route } Switch me permite cambiar las pag, Route es la ruta dl comp q se va cargar\nfunction App() {\n  //Dsps d estar en 'Index.js'obtenemos un valor d refer d mi sesion d usuario q ya exist en sesionUsuarioReducer y llamamos al obj dispatch\n  //E invok al 'useStateValue' q allow acceso a las var d sesion\n  //const [{ openSnackbar }, dispatch] = useStateValue(); refer d mi snackbar\n  const [{ openSnackbar }, dispatch] = useStateValue();\n  //Declaramos una var d estado LOCAL q funcione solo a nievl d App.js q allow saber si el reques fue hecho o no al servidor para obtener la data dl user actual\n  //La var local es 'iniciaApp' se ejecutara 1 vez y el metodo q va modificarla sera 'setIniciaApp' y dejamos en 'false' como valor inicial\n  //Como es 1 requests d ida y vuelta al servidor q indica q el user esta o no en sesion la hacemos como flag\n  const [iniciaApp, setIniciaApp] = useState(false);\n\n  //Esta f nos permite ejecutar cierto codigo cuaando se haya cargado mi comp react\n  useEffect(() => {\n    //Si 'iniciaApp' es falso has esto\n    // A la f \"action\" 'obtenerUsuarioActual' le pasamos como param el 'dispatch', cuando me devuelva una respuesta 'then(response =>'\n    //Le indicamos a esta var q ya se inicio \"setIniciApp(true)\" 'iniciaApp' en true para q no vuelva a ejecutarse esta condicion\n    if (!iniciaApp) {\n      obtenerUsuarioActual(dispatch)\n        .then((response) => {\n          setIniciaApp(true);\n        })\n        .catch((error) => {\n          setIniciaApp(true);\n        });\n      //sea error o exitoso siempre quiero q inicie.. por eso ambas condiciones van en true\n    }\n\n    //Y solo evalua el cambio d valor d 'iniciaApp'\n  }, [iniciaApp]);\n\n  //return iniciaApp === false ? null : (\n  //Posterior configuramos el react-router-dom q me permite la comunicacion entre diferentes comp react\n  // <Router> es la q me permite la navegacion entre diferentes comp\n  //\"openSnackbar\" es la data q guardamos a nivel global\n  //Cuando alguien cambie la data dl reducer \"openSnackbar\" sera 'true' y si update a false desaparecera\n  //open={openSnackbar ? openSnackbar.open : false} si \"openSnackbar existe\" so allows el estado de open else false\n  //autoHideDuration={3000} el tiempo d duracion en pantalla 3 segundos.\n  //ContentProps={{ \"aria-describedy\": \"message-id\" }} estilo dl texto snackbar\n  //openSnackbar este obj tiene 2 valores.. 1 valor 'open' q puede ser true o false y otro valor 'mensaje' q muestra el sms en pantalla\n  //Imprime un DOM virtual span  <span id=\"message-id\">\n  //  {openSnackbar ? openSnackbar.mensaje : \"\"} si existe muestra el mensaje else no muestres nada\n  //onClose={() => es el evento de cierre para q mate el proceso d autoHide\n  //Llamamos al reducer q nos permite actualizar 'dispatch({'\n  //   type: \"OPEN_SNACKBAR\", llamo al snackbar \n  //openMensaje:  indicamos cual es la data q va actualizarse\n  //open: false, para q se oculte y el mensaje VACIO\n  //onClose llama al dispatch q es quien actualiza el reducer \n  return (\n    <React.Fragment>\n      <Snackbar\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        open={openSnackbar ? openSnackbar.open : false}\n        autoHideDuration={3000}\n        ContentProps={{ \"aria-describedy\": \"message-id\" }}\n        message={\n          <span id=\"message-id\">\n            {openSnackbar ? openSnackbar.mensaje : \"\"}\n          </span>\n        }\n        onClose={() =>\n          dispatch({\n            type: \"OPEN_SNACKBAR\",\n            openMensaje: {\n              open: false,\n              mensaje: \"\",\n            },\n          })\n        }\n      ></Snackbar>\n      <Router>\n        {/*El param q va ingresar sera {theme} q definimos anteriromnt*/}\n        <MuithemeProvider theme={theme}>\n          {/*La barra siempre se mantendra sin importar el comp q vamos a ejecutar por eso como q la dejamos root*/}\n          <AppNavbar />\n\n          <Grid container>\n            {/* <Switch> me permite alternar entre diferents comp */}\n            <Switch>\n              <Route exact path=\"/auth/login\" component={Login} />\n              <Route\n                exact\n                path=\"/auth/registrar\"\n                component={RegistrarUsuario}\n              />\n              <Route exact path=\"/auth/perfil\" component={PerfilUsuario} />\n\n              {/*Para indicar q por defecto cuando cargue me abra el comp 'PerfilUsuario'*/}\n              <Route exact path=\"/\" component={PerfilUsuario} />\n            </Switch>\n          </Grid>\n        </MuithemeProvider>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","C:\\ProyectoCoreb\\cursos-online-app\\src\\reportWebVitals.js",[],["81","82"],"C:\\ProyectoCoreb\\cursos-online-app\\src\\theme\\theme.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\seguridad\\RegistrarUsuario.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\Tool\\Style.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\seguridad\\Login.js",["83"],"import React, { useState } from \"react\";\r\nimport style from \"../Tool/Style\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Container,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { loginUsuario } from \"../../actions/UsuarioAction\";\r\nimport { useStateValue } from \"../../contexto/store\";\r\n\r\nconst Login = (props) => {\r\n  //Recordar siempre importar useState, useEffect etc...\r\n  //Creamos nuestras var d estado y components ReactHooks\r\n  const [{ usuarioSesion }, dispatch] = useStateValue();\r\n  const [usuario, setUsuario] = useState({\r\n    Email: \"\",\r\n    Password: \"\",\r\n  });\r\n\r\n  //Creamos el metodo q me permite capturar los valores dl user... Para mantener los valores anteriores setUsuario((anterior) y solo modificar\r\n  //el valor d la caja d txt q el usuario esta modificando algo.. Mantiene todo lo anterior '...anterior,' y q se modifique dond unicamnt el user\r\n  //esta escribiendo algo  [name]: value,\r\n  const ingresarValoresMemoria = (e) => {\r\n    const { name, value } = e.target;\r\n    setUsuario((anterior) => ({\r\n      ...anterior,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const loginUsuarioBoton = (e) => {\r\n    e.preventDefault();\r\n    loginUsuario(usuario, dispatch).then((response) => {\r\n      console.log(\"response.data.token\", response.data.token);\r\n      if (response.status === 200) {\r\n        window.localStorage.setItem(\"token_seguridad\", response.data.token);\r\n        props.history.push(\"/\");\r\n      } else {\r\n        dispatch({\r\n          type: \"OPEN_SNACKBAR\",\r\n          openMensaje: {\r\n            open: true,\r\n            mensaje: \"Las credenciales del usuario son incorrectas\",\r\n          },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xs\">\r\n      <div style={style.paper}>\r\n        <Avatar style={style.avatar}>\r\n          <LockOutlinedIcon style={style.icon} />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Login de Usuario\r\n        </Typography>\r\n        <form style={style.form}>\r\n          <TextField\r\n            name=\"Email\"\r\n            value={usuario.Email}\r\n            onChange={ingresarValoresMemoria}\r\n            variant=\"outlined\"\r\n            label=\"Ingrese username\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            name=\"Password\"\r\n            value={usuario.Password}\r\n            onChange={ingresarValoresMemoria}\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            label=\"password\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            onClick={loginUsuarioBoton}\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={style.submit}\r\n          >\r\n            Enviar\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\seguridad\\PerfilUsuario.js",["84"],"import {\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  obtenerUsuarioActual,\r\n  actualizarUsuario\r\n  \r\n} from \"../../actions/UsuarioAction\";\r\n//import ImageUploader from \"react-images-upload\";\r\n//import reactFoto from \"../../logo.svg\";\r\n//import { v4 as uuidv4 } from \"uuid\";\r\n//import { obtenerDataImagen } from \"../../actions/ImagenAction\";\r\nimport style from \"../Tool/Style\";\r\nimport { useStateValue } from \"../../contexto/store\";\r\n\r\nconst PerfilUsuario = () => {\r\n  const [{ sesionUsuario }, dispatch] = useStateValue();\r\n  const [usuario, setUsuario] = useState({\r\n    \r\n    //Le indicamos q estos son los valores q quiero mapear\r\n    nombreCompleto: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmarPassword: \"\",\r\n    username: \"\",\r\n  });\r\n\r\n  //Creamos la funcion q va disparar los valores al virtual DOM de REACT-- \"e\" = al contenido d la caja d texto\r\n  const ingresarValoresMemoria = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    //Si quiero cambiar los valores d mi var d estado 'usuario' llamamos al metodo 'setUsuario'\r\n    //Abrimos una f dentro d 'setUsuario' para q mantenga todo lo q existia antes y solo modifiq el valor 'NombreCompleto' d la c. d texto\r\n    // A travs d su propiedad name y value.. 'value' es lo q ingresa el cliente en el formular y asi sucesivament.... con todo los 'name' d las cajas\r\n    setUsuario((anterior) => ({\r\n      ...anterior,\r\n      [name]: value,\r\n    }));\r\n\r\n    //Cuando esto se ejecute mantendra todos los datos anteriores dl form y solo cambiara aquella c. d texto q el usuario ingresa data\r\n  };\r\n\r\n\r\n  //Vamos hace q se pinte la data cuando la accion se haya realizado\r\n  useEffect(() => {\r\n    setUsuario(sesionUsuario.usuario);\r\n    \r\n    //Invocamos al action 'obtenerUsuarioActual'--posterior el srvidor devuelv el obj response\r\n    obtenerUsuarioActual(dispatch).then((response) => {\r\n      \r\n      console.log(\r\n        'Esta es la data del objeto response del usuario actual', response);\r\n      setUsuario(response.data);\r\n      \r\n    });\r\n  }, []);\r\n  //-->>>>\r\n\r\n  const guardarUsuario = (e) => {\r\n    e.preventDefault();\r\n    console.log('usuario beofre send', usuario);\r\n    actualizarUsuario(usuario, dispatch).then((response) => {\r\n      //console.log('se actualizo el usuario', response);\r\n\r\n      if (response.status === 200) {\r\n        dispatch({\r\n          type: \"OPEN_SNACKBAR\",\r\n          openMensaje: {\r\n            open: true,\r\n            mensaje: \"Se guardaron exitosamente los cambios en Perfil Usuario\",\r\n          }\r\n        })\r\n        window.localStorage.setItem(\"token_seguridad\", response.data.token);\r\n      }else {\r\n        dispatch({\r\n          type: \"OPEN_SNACKBAR\",\r\n          openMensaje: {\r\n            open: true,\r\n            mensaje:\r\n              \"Errores al intentar guardar en : \" +\r\n              Object.keys(response.data.errors),\r\n          },\r\n        });\r\n      }\r\n      \r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"md\" justify=\"center\">\r\n      <div style={style.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Perfil de usuario\r\n        </Typography>\r\n      </div>\r\n      <form style={style.form}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} md={12}>\r\n            <TextField\r\n              name=\"nombreCompleto\"\r\n              value={usuario.nombreCompleto || \"\"}\r\n              variant=\"outlined\"\r\n              onChange={ingresarValoresMemoria}\r\n              fullWidth\r\n              label=\"Ingrese nombre y apellidos\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              name=\"username\"\r\n              value={usuario.username || \"\"}\r\n              variant=\"outlined\"\r\n              onChange={ingresarValoresMemoria}\r\n              fullWidth\r\n              label=\"Ingrese username\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              name=\"email\"\r\n              value={usuario.email || \"\"}\r\n              variant=\"outlined\"\r\n              onChange={ingresarValoresMemoria}\r\n              fullWidth\r\n              label=\"Ingrese email\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              name=\"password\"\r\n              value={usuario.password || \"\"}\r\n              type=\"password\"\r\n              onChange={ingresarValoresMemoria}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              label=\"Ingrese password\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              name=\"confirmarPassword\"\r\n              value={usuario.confirmarPassword || \"\"}\r\n              type=\"password\"\r\n              onChange={ingresarValoresMemoria}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              label=\"Confirme password\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container justifyContent=\"center\">\r\n          <Grid item xs={12} md={6}>\r\n            <Button\r\n              type=\"submit\"\r\n              //Le indicamos q invoke al metodo 'guardarUsuario' para implementarlo en la prt superior\r\n              onClick={guardarUsuario}\r\n              fullWidth\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              color=\"primary\"\r\n              style={style.submit}\r\n            >\r\n              Guardar Datos\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default PerfilUsuario;\r\n// []) una sola vez llama a este event xq le indicamos q no evalue ninguna var\r\n\r\n  // preventDafault para evitar q haga un submit completo y refresq toda la pag, LLMAMMOS al metodo action 'actualizarUsuario'\r\n  // le pasamos la data q queremos actualizar actualizarUsuario(usuario) recordar q \"usuario\" es nuestra var d estado q representa la data,\r\n  // Me va devolver then(response =>,Como me genera un nuevo token lo volvemos a grabar en el local storage  window.localStorage.setItem...","C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\tool\\Style.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\actions\\UsuarioAction.js",["85"],"//Imprtamos el arch d HttpCliente\r\nimport HttpCliente from \"../servicios/HttpCliente\";\r\nimport axios from 'axios';\r\n\r\n\r\n//Procedemos a crear una f 'registrarUsuario'q me permita registrar usuarios, usando los endPoints d ASP.netCore\r\n//El param 'usuario' tiene toda la data dl usuaio a registrar\r\n//Cuando se habla d procesos d ida y vuelta.. D cliente y servidor SE HABLA DE PROCESOS ASINCRONOS\r\n//En jScript para manejar el tiempo d espera y retorno d los valores dl server USAMOS LA S PROMESAS, permite aguantar\r\n// el resultado q el server te envia a futuro\r\n//Al crear una promesa indicamos q no va terminar esta funcion hasta q el server me haya enviado la respuesta q necesitamos\r\n\r\nexport const registrarUsuario = (usuario) => {\r\n  return new Promise((resolve, eject) => {\r\n    //Al momento d ejecutar esta linea se envia el request al servidor o server y en respuesta el server envia una respuesta d tipo 'response'\r\n    //Obtenemos ese obj response con la f 'then(response=>' y terminamos con lo ultimo q es la confirmacion.\r\n    HttpCliente.post(\"/usuario/registrar\", usuario).then((response) => {\r\n      resolve(response);\r\n      //Se confirma q el proceso con el servidor ha concluido\r\n    });\r\n  });\r\n};\r\n// El BTN en enviar consume el 'actions' el 'action' se encarga de llamar al AXIOS y 'axios' posterior envia el request al NetCore WebService\r\n//En respuesta el axios recibe la data, status, texto dsd ASP y AXIOS le pasa un 'response' al 'actions'\r\n//Por eso desde el archivo 'RegistrarUsuario' invocamos a la F global 'action'\r\n\r\nexport const obtenerUsuarioActual = (dispatch) => {\r\n  //esta f no recibe ningun param, SOLO el request, el mismo action le pasa el token con las configuracns q hicimos\r\n  return new Promise((resolve, eject) => {\r\n    //Esta part es como hacer con POSTMAN\r\n    //Esta es la ejecucion dl axios q invok al servidor luego dl 'then' es la respuesta dl servidor\r\n    HttpCliente.get(\"/usuario\").then((response) => {\r\n      console.log('response ', response);\r\n      if(response.data && response.data.imagenPerfil){\r\n          let fotoPerfil = response.data.imagenPerfil;\r\n          const nuevoFile = 'data:image/' + fotoPerfil.extension + ';base64,' + fotoPerfil.data;\r\n          response.data.imagenPerfil = nuevoFile;\r\n      }\r\n      \r\n      //Llamamos al reducer y decimos q ejecute un disparo d un event a un \"reducer\" q se llama \"INICIAR_SESION\"\r\n      //Y luego pasale como valor d sesion el 'response.data'\r\n      dispatch({\r\n        type: \"INICIAR_SESION\",\r\n        sesion: response.data,\r\n        autenticado: true,\r\n      });\r\n\r\n      //resolve es para q me devuelva ese response\r\n      resolve(response);\r\n    }).catch(error => {\r\n      console.log('error actualizar', error);\r\n      resolve(error);\r\n  });\r\n});\r\n  // Cuando se ejecute 'obtenerUsuarioActual' invoka al 'axios' y tambien ingresa al reducer\r\n  //Para q el axion pueda invocar al reducer necesitaq le pasen como param dsd el cliente 1 obj d tipo 'dispatch'\r\n}\r\n\r\n//Utilizamos promesas al usar eventos d servidor, invocamos al obj 'HttpCliente', la url es /usuario y le pasams el param\r\n//Q va entrar q es 'usuario' invok al then y este abre una f q me abrira el obj response\r\nexport const actualizarUsuario = (usuario, dispatch) => {\r\n  return new Promise((resolve, eject) => {\r\n    HttpCliente.put(\"/usuario\", usuario).then((response) => {\r\n      resolve(response);\r\n    })\r\n    .catch(error => {\r\n      resolve(error.response);\r\n    })\r\n  });\r\n};\r\n\r\n//Creamos nuestro meth action\r\n//Le pasamos un obj d tipo usuario, retornara una promesa, invok a HttpCliente, invok a 1 meth q permite login 'post'\r\nexport const loginUsuario = (usuario, dispatch) => {\r\n  return new Promise((resolve, eject) => {\r\n    HttpCliente.post(\"/usuario/login\", usuario).then((response) => {\r\n      resolve(response);\r\n    });\r\n  });\r\n};\r\n","C:\\ProyectoCoreb\\cursos-online-app\\src\\servicios\\HttpCliente.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\navegacion\\AppNavbar.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\componentes\\navegacion\\bar\\BarSesion.js",["86"],"import {\r\n  IconButton,\r\n  Toolbar,\r\n  Typography,\r\n  makeStyles,\r\n  Avatar,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useStateValue } from \"../../../contexto/store\";\r\nimport FotoUsuarioTemp from \"../../../logo.svg\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  //useStyles utiliza una f llamada makeStyles y makeStyles allows invoke a las librerias responsive d materialDesign en este caso el 'theme'\r\n  //el valor q definimos d manera global en el inicio d nuestro projct, lo estamos pasando al 'materialDesign'\r\n  //Arranca en display 'none' cuando reconoza una pantalla 'md' osea tablet o desktop, rompe el none y show su contenido\r\n  seccionDesktop: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"flex\",\r\n    },\r\n  },\r\n  seccionMobile: {\r\n    display: \"flex\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  //\"grow\" Toma todo el espacio d un div, es como 1 bloq q divide dsd el medio, evitando q se pegue el h6 'Cursos Online' y ese btn d la esquina\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  avatarSize: {\r\n    width: 40,\r\n    height: 40,\r\n  },\r\n}));\r\n\r\nconst BarSesion = () => {\r\n  const classes = useStyles();\r\n  const [{ sesionUsuario }, dispatch] = useStateValue();\r\n  //iNVOK a mi var global d estado, adicional el obj 'dispatch' verificams q 'useStateValue' se import\r\n  // 'sesionUsuario' esta en contexto/reducers/index.js osea habiamos definid nuestra var d sesion\r\n// 'sesionUsuario ?' si este valor existe pintame el nombre completo else pinta en blanco*/\r\n//const [{ sesionUsuario }, dispatch] = useStateValue(); allow acceder al valor global d la sesion d usuario\r\n\r\n  return (\r\n    <Toolbar>\r\n      <IconButton color=\"inherit\">\r\n        <i className=\"material-icons\">menu</i>\r\n      </IconButton>\r\n      <Typography variant=\"h6\">Cursos Online</Typography>\r\n      <div className={classes.grow}></div>\r\n\r\n      <div className={classes.seccionDesktop}>\r\n        <Button color=\"inherit\">Salir</Button>\r\n        <Button color=\"inherit\">\r\n          {sesionUsuario ? sesionUsuario.usuario.nombreCompleto :  \"\"}\r\n        </Button>\r\n        \r\n        <Avatar src={FotoUsuarioTemp}></Avatar>\r\n      </div>\r\n      <div className={classes.seccionMobile}>\r\n        <IconButton color=\"inherit\">\r\n          <i className=\"material-icons\">more_vert</i>\r\n        </IconButton>\r\n      </div>\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nexport default BarSesion;\r\n","C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\store.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\initialState.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\reducers\\index.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\reducers\\sesionUsuarioReducer.js",[],"C:\\ProyectoCoreb\\cursos-online-app\\src\\contexto\\reducers\\openSnackbarReducer.js",[],{"ruleId":"87","severity":1,"message":"88","line":41,"column":6,"nodeType":"89","endLine":41,"endColumn":17,"suggestions":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":17,"column":12,"nodeType":"97","messageId":"98","endLine":17,"endColumn":25},{"ruleId":"87","severity":1,"message":"99","line":61,"column":6,"nodeType":"89","endLine":61,"endColumn":8,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"101","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":13},{"ruleId":"95","severity":1,"message":"102","line":41,"column":29,"nodeType":"97","messageId":"98","endLine":41,"endColumn":37},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["103"],"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'usuarioSesion' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'sesionUsuario.usuario'. Either include them or remove the dependency array.",["106"],"'axios' is defined but never used.","'dispatch' is assigned a value but never used.",{"desc":"107","fix":"108"},"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [dispatch, iniciaApp]",{"range":"111","text":"112"},"Update the dependencies array to be: [dispatch, sesionUsuario.usuario]",{"range":"113","text":"114"},[2371,2382],"[dispatch, iniciaApp]",[2134,2136],"[dispatch, sesionUsuario.usuario]"]