{"ast":null,"code":"//Imprtamos el arch d HttpCliente\nimport HttpCliente from \"../servicios/HttpCliente\"; //Procedemos a crear una f 'registrarUsuario'q me permita registrar usuarios, usando los endPoints d ASP.netCore\n//El param 'usuario' tiene toda la data dl usuaio a registrar\n//Cuando se habla d procesos d ida y vuelta.. D cliente y servidor SE HABLA DE PROCESOS ASINCRONOS \n//En jScript para manejar el tiempo d espera y retorno d los valores dl server USAMOS LA S PROMESAS, permite aguantar \n// el resultado q el server te envia a futuro \n//Al crear una promesa indicamos q no va terminar esta funcion hasta q el server me haya enviado la respuesta q necesitamos \n\nexport const registrarUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    //Al momento d ejecutar esta linea se envia el request al servidor o server y en respuesta el server envia una respuesta d tipo 'response'\n    //Obtenemos ese obj response con la f 'then(response=>' y terminamos con lo ultimo q es la confirmacion.\n    HttpCliente.post('/usuario/registrar', usuario).then(response => {\n      resolve(response); //Se confirma q el proceso con el servidor ha concluido\n    });\n  });\n}; // El BTN en enviar consume el 'actions' el 'action' se encarga de llamar al AXIOS y 'axios' posterior envia el request al NetCore WebService\n//En respuesta el axios recibe la data, status, texto dsd ASP y AXIOS le pasa un 'response' al 'actions'\n//Por eso desde el archivo 'RegistrarUsuario' invocamos a la F global 'action'\n\nexport const obtenerUsuarioActual = () => {\n  //esta f no recibe ningun param, SOLO el request, el mismo action le pasa el token con las configuracns q hicimos\n  return new Promise((resolve, eject) => {\n    //Esta part es como hacer con POSTMAN\n    HttpCliente.get('/usuario').then(response => {\n      //resolve es para q me devuelva ese response\n      resolve(response);\n    });\n  });\n}; //Utilizamos promesas al usar eventos d servidor, invocamos al obj 'HttpCliente', la url es /usuario y le pasams el param\n//Q va entrar q es 'usuario' invok al then y este abre una f q me abrira el obj response\n\nexport const actualizarUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    HttpCliente.put('/usuario', usuario).then(response => {\n      resolve(response);\n    });\n  });\n};\nexport const loginUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    HttpCliente.post(\"/usuario/login\", usuario).then(response => {\n      res;\n    });\n  });\n};","map":{"version":3,"sources":["C:/ProyectoCoreb/cursos-online-app/src/actions/UsuarioAction.js"],"names":["HttpCliente","registrarUsuario","usuario","Promise","resolve","eject","post","then","response","obtenerUsuarioActual","get","actualizarUsuario","put","loginUsuario","res"],"mappings":"AAAA;AACA,OAAOA,WAAP,MAAwB,0BAAxB,C,CAGA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AAE3C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAErC;AACA;AACAL,IAAAA,WAAW,CAACM,IAAZ,CAAiB,oBAAjB,EAAuCJ,OAAvC,EAAgDK,IAAhD,CAAqDC,QAAQ,IAAG;AAE5DJ,MAAAA,OAAO,CAACI,QAAD,CAAP,CAF4D,CAG5D;AACH,KAJD;AAMD,GAVM,CAAP;AAWD,CAbM,C,CAcP;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AAE1C;AACA,SAAO,IAAIN,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAErC;AACEL,IAAAA,WAAW,CAACU,GAAZ,CAAgB,UAAhB,EAA4BH,IAA5B,CAAiCC,QAAQ,IAAI;AAE3C;AACEJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAJD;AAKH,GARM,CAAP;AAUC,CAbM,C,CAeP;AACA;;AACA,OAAO,MAAMG,iBAAiB,GAAIT,OAAD,IAAY;AAC3C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAmB;AACpCL,IAAAA,WAAW,CAACY,GAAZ,CAAgB,UAAhB,EAA4BV,OAA5B,EAAqCK,IAArC,CAA0CC,QAAQ,IAAG;AAEnDJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACD,KAHD;AAID,GALM,CAAP;AAMD,CAPM;AASP,OAAO,MAAMK,YAAY,GAAGX,OAAO,IAAG;AACpC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrCL,IAAAA,WAAW,CAACM,IAAZ,CAAiB,gBAAjB,EAAmCJ,OAAnC,EAA4CK,IAA5C,CAAiDC,QAAQ,IAAI;AAC3DM,MAAAA,GAAG;AACJ,KAFD;AAGD,GAJM,CAAP;AAKD,CANM","sourcesContent":["//Imprtamos el arch d HttpCliente\r\nimport HttpCliente from \"../servicios/HttpCliente\";\r\n\r\n\r\n//Procedemos a crear una f 'registrarUsuario'q me permita registrar usuarios, usando los endPoints d ASP.netCore\r\n//El param 'usuario' tiene toda la data dl usuaio a registrar\r\n//Cuando se habla d procesos d ida y vuelta.. D cliente y servidor SE HABLA DE PROCESOS ASINCRONOS \r\n//En jScript para manejar el tiempo d espera y retorno d los valores dl server USAMOS LA S PROMESAS, permite aguantar \r\n// el resultado q el server te envia a futuro \r\n//Al crear una promesa indicamos q no va terminar esta funcion hasta q el server me haya enviado la respuesta q necesitamos \r\nexport const registrarUsuario = (usuario) => {\r\n\r\n  return new Promise((resolve, eject) => {\r\n\r\n    //Al momento d ejecutar esta linea se envia el request al servidor o server y en respuesta el server envia una respuesta d tipo 'response'\r\n    //Obtenemos ese obj response con la f 'then(response=>' y terminamos con lo ultimo q es la confirmacion.\r\n    HttpCliente.post('/usuario/registrar', usuario).then(response=> {\r\n\r\n        resolve(response);\r\n        //Se confirma q el proceso con el servidor ha concluido\r\n    })\r\n\r\n  })\r\n}\r\n// El BTN en enviar consume el 'actions' el 'action' se encarga de llamar al AXIOS y 'axios' posterior envia el request al NetCore WebService\r\n//En respuesta el axios recibe la data, status, texto dsd ASP y AXIOS le pasa un 'response' al 'actions'\r\n//Por eso desde el archivo 'RegistrarUsuario' invocamos a la F global 'action'\r\n\r\nexport const obtenerUsuarioActual = () => {\r\n\r\n//esta f no recibe ningun param, SOLO el request, el mismo action le pasa el token con las configuracns q hicimos\r\nreturn new Promise((resolve, eject) => {\r\n\r\n  //Esta part es como hacer con POSTMAN\r\n    HttpCliente.get('/usuario').then(response => {\r\n\r\n      //resolve es para q me devuelva ese response\r\n        resolve(response);\r\n    })\r\n})\r\n\r\n}\r\n\r\n//Utilizamos promesas al usar eventos d servidor, invocamos al obj 'HttpCliente', la url es /usuario y le pasams el param\r\n//Q va entrar q es 'usuario' invok al then y este abre una f q me abrira el obj response\r\nexport const actualizarUsuario = (usuario) =>{\r\n  return new Promise((resolve, eject) =>{\r\n    HttpCliente.put('/usuario', usuario).then(response =>{\r\n\r\n      resolve(response);\r\n    })\r\n  })\r\n} \r\n\r\nexport const loginUsuario = usuario =>{\r\n  return new Promise((resolve, eject) => {\r\n    HttpCliente.post(\"/usuario/login\", usuario).then(response => {\r\n      res\r\n    })\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}