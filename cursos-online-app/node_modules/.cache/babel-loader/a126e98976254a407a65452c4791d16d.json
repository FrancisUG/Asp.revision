{"ast":null,"code":"//Imprtamos el arch d HttpCliente\nimport HttpCliente from \"../servicios/HttpCliente\"; //Procedemos a crear una f 'registrarUsuario'q me permita registrar usuarios, usando los endPoints d ASP.netCore\n//El param 'usuario' tiene toda la data dl usuaio a registrar\n//Cuando se habla d procesos d ida y vuelta.. D cliente y servidor SE HABLA DE PROCESOS ASINCRONOS\n//En jScript para manejar el tiempo d espera y retorno d los valores dl server USAMOS LA S PROMESAS, permite aguantar\n// el resultado q el server te envia a futuro\n//Al crear una promesa indicamos q no va terminar esta funcion hasta q el server me haya enviado la respuesta q necesitamos\n\nexport const registrarUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    //Al momento d ejecutar esta linea se envia el request al servidor o server y en respuesta el server envia una respuesta d tipo 'response'\n    //Obtenemos ese obj response con la f 'then(response=>' y terminamos con lo ultimo q es la confirmacion.\n    HttpCliente.post(\"/usuario/registrar\", usuario).then(response => {\n      resolve(response); //Se confirma q el proceso con el servidor ha concluido\n    });\n  });\n}; // El BTN en enviar consume el 'actions' el 'action' se encarga de llamar al AXIOS y 'axios' posterior envia el request al NetCore WebService\n//En respuesta el axios recibe la data, status, texto dsd ASP y AXIOS le pasa un 'response' al 'actions'\n//Por eso desde el archivo 'RegistrarUsuario' invocamos a la F global 'action'\n\nexport const obtenerUsuarioActual = dispatch => {\n  //esta f no recibe ningun param, SOLO el request, el mismo action le pasa el token con las configuracns q hicimos\n  return new Promise((resolve, eject) => {\n    //Esta part es como hacer con POSTMAN\n    //Esta es la ejecucion dl axios q invok al servidor luego dl 'then' es la respuesta dl servidor\n    HttpCliente.get(\"/\").then(response => {\n      //Llamamos al reducer y decimos q ejecute un disparo d un event a un \"reducer\" q se llama \"INICIAR_SESION\"\n      //Y luego pasale como valor d sesion el 'response.data'\n      dispatch({\n        type: \"INICIAR_SESION\",\n        sesion: response.data,\n        autenticado: true\n      }); //resolve es para q me devuelva ese response\n\n      resolve(response);\n    });\n  }); // Cuando se ejecute 'obtenerUsuarioActual' invoka al 'axios' y tambien ingresa al reducer\n  //Para q el axion pueda invocar al reducer necesitaq le pasen como param dsd el cliente 1 obj d tipo 'dispatch'\n}; //Utilizamos promesas al usar eventos d servidor, invocamos al obj 'HttpCliente', la url es /usuario y le pasams el param\n//Q va entrar q es 'usuario' invok al then y este abre una f q me abrira el obj response\n\nexport const actualizarUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    HttpCliente.put(\"/usuario\", usuario).then(response => {\n      resolve(response);\n    });\n  });\n}; //Creamos nuestro meth action\n//Le pasamos un obj d tipo usuario, retornara una promesa, invok a HttpCliente, invok a 1 meth q permite login 'post'\n\nexport const loginUsuario = usuario => {\n  return new Promise((resolve, eject) => {\n    HttpCliente.post(\"/usuario/login\", usuario).then(response => {\n      resolve(response);\n    });\n  });\n};","map":{"version":3,"sources":["C:/ProyectoCoreb/cursos-online-app/src/actions/UsuarioAction.js"],"names":["HttpCliente","registrarUsuario","usuario","Promise","resolve","eject","post","then","response","obtenerUsuarioActual","dispatch","get","type","sesion","data","autenticado","actualizarUsuario","put","loginUsuario"],"mappings":"AAAA;AACA,OAAOA,WAAP,MAAwB,0BAAxB,C,CAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AAC3C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrC;AACA;AACAL,IAAAA,WAAW,CAACM,IAAZ,CAAiB,oBAAjB,EAAuCJ,OAAvC,EAAgDK,IAAhD,CAAsDC,QAAD,IAAc;AACjEJ,MAAAA,OAAO,CAACI,QAAD,CAAP,CADiE,CAEjE;AACD,KAHD;AAID,GAPM,CAAP;AAQD,CATM,C,CAUP;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAIC,QAAD,IAAc;AAChD;AACA,SAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrC;AACA;AACAL,IAAAA,WAAW,CAACW,GAAZ,CAAgB,GAAhB,EAAqBJ,IAArB,CAA2BC,QAAD,IAAc;AACtC;AACA;AACAE,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAE,gBADC;AAEPC,QAAAA,MAAM,EAAEL,QAAQ,CAACM,IAFV;AAGPC,QAAAA,WAAW,EAAE;AAHN,OAAD,CAAR,CAHsC,CAStC;;AACAX,MAAAA,OAAO,CAACI,QAAD,CAAP;AACD,KAXD;AAYD,GAfM,CAAP,CAFgD,CAkBhD;AACA;AACD,CApBM,C,CAsBP;AACA;;AACA,OAAO,MAAMQ,iBAAiB,GAAId,OAAD,IAAa;AAC5C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrCL,IAAAA,WAAW,CAACiB,GAAZ,CAAgB,UAAhB,EAA4Bf,OAA5B,EAAqCK,IAArC,CAA2CC,QAAD,IAAc;AACtDJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD,CANM,C,CAQP;AACA;;AACA,OAAO,MAAMU,YAAY,GAAIhB,OAAD,IAAa;AACvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrCL,IAAAA,WAAW,CAACM,IAAZ,CAAiB,gBAAjB,EAAmCJ,OAAnC,EAA4CK,IAA5C,CAAkDC,QAAD,IAAc;AAC7DJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD,CANM","sourcesContent":["//Imprtamos el arch d HttpCliente\r\nimport HttpCliente from \"../servicios/HttpCliente\";\r\n\r\n\r\n//Procedemos a crear una f 'registrarUsuario'q me permita registrar usuarios, usando los endPoints d ASP.netCore\r\n//El param 'usuario' tiene toda la data dl usuaio a registrar\r\n//Cuando se habla d procesos d ida y vuelta.. D cliente y servidor SE HABLA DE PROCESOS ASINCRONOS\r\n//En jScript para manejar el tiempo d espera y retorno d los valores dl server USAMOS LA S PROMESAS, permite aguantar\r\n// el resultado q el server te envia a futuro\r\n//Al crear una promesa indicamos q no va terminar esta funcion hasta q el server me haya enviado la respuesta q necesitamos\r\n\r\nexport const registrarUsuario = (usuario) => {\r\n  return new Promise((resolve, eject) => {\r\n    //Al momento d ejecutar esta linea se envia el request al servidor o server y en respuesta el server envia una respuesta d tipo 'response'\r\n    //Obtenemos ese obj response con la f 'then(response=>' y terminamos con lo ultimo q es la confirmacion.\r\n    HttpCliente.post(\"/usuario/registrar\", usuario).then((response) => {\r\n      resolve(response);\r\n      //Se confirma q el proceso con el servidor ha concluido\r\n    });\r\n  });\r\n};\r\n// El BTN en enviar consume el 'actions' el 'action' se encarga de llamar al AXIOS y 'axios' posterior envia el request al NetCore WebService\r\n//En respuesta el axios recibe la data, status, texto dsd ASP y AXIOS le pasa un 'response' al 'actions'\r\n//Por eso desde el archivo 'RegistrarUsuario' invocamos a la F global 'action'\r\n\r\nexport const obtenerUsuarioActual = (dispatch) => {\r\n  //esta f no recibe ningun param, SOLO el request, el mismo action le pasa el token con las configuracns q hicimos\r\n  return new Promise((resolve, eject) => {\r\n    //Esta part es como hacer con POSTMAN\r\n    //Esta es la ejecucion dl axios q invok al servidor luego dl 'then' es la respuesta dl servidor\r\n    HttpCliente.get(\"/\").then((response) => {\r\n      //Llamamos al reducer y decimos q ejecute un disparo d un event a un \"reducer\" q se llama \"INICIAR_SESION\"\r\n      //Y luego pasale como valor d sesion el 'response.data'\r\n      dispatch({\r\n        type: \"INICIAR_SESION\",\r\n        sesion: response.data,\r\n        autenticado: true\r\n      });\r\n\r\n      //resolve es para q me devuelva ese response\r\n      resolve(response);\r\n    })\r\n  })\r\n  // Cuando se ejecute 'obtenerUsuarioActual' invoka al 'axios' y tambien ingresa al reducer\r\n  //Para q el axion pueda invocar al reducer necesitaq le pasen como param dsd el cliente 1 obj d tipo 'dispatch'\r\n}\r\n\r\n//Utilizamos promesas al usar eventos d servidor, invocamos al obj 'HttpCliente', la url es /usuario y le pasams el param\r\n//Q va entrar q es 'usuario' invok al then y este abre una f q me abrira el obj response\r\nexport const actualizarUsuario = (usuario) => {\r\n  return new Promise((resolve, eject) => {\r\n    HttpCliente.put(\"/usuario\", usuario).then((response) => {\r\n      resolve(response);\r\n    });\r\n  });\r\n};\r\n\r\n//Creamos nuestro meth action\r\n//Le pasamos un obj d tipo usuario, retornara una promesa, invok a HttpCliente, invok a 1 meth q permite login 'post'\r\nexport const loginUsuario = (usuario) => {\r\n  return new Promise((resolve, eject) => {\r\n    HttpCliente.post(\"/usuario/login\", usuario).then((response) => {\r\n      resolve(response);\r\n    });\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}