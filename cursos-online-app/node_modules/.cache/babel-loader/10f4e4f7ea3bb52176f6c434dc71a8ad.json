{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProyectoCoreb\\\\cursos-online-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { ThemeProvider as MuithemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./theme/theme\";\nimport PerfilUsuario from \"./componentes/seguridad/PerfilUsuario\";\nimport Login from \"./componentes/seguridad/Login\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport RegistrarUsuario from \"./componentes/seguridad/RegistrarUsuario\";\nimport { Grid, Snackbar } from \"@material-ui/core\";\nimport AppNavbar from \"./componentes/navegacion/AppNavbar\";\nimport { useStateValue } from \"./contexto/store\";\nimport { obtenerUsuarioActual } from \"./actions/UsuarioAction\"; //import { BrowserRouter as Router, Switch, Route } Switch me permite cambiar las pag, Route es la ruta dl comp q se va cargar\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Dsps d estar en 'Index.js'obtenemos un valor d refer d mi sesion d usuario q ya exist en sesionUsuarioReducer y llamamos al obj dispatch\n  //E invok al 'useStateValue' q allow acceso a las var d sesion\n  //const [{ openSnackbar }, dispatch] = useStateValue(); refer d mi snackbar\n  const [{\n    sesionUsuario,\n    openSnackbar\n  }, dispatch] = useStateValue(); //Declaramos una var d estado LOCAL q funcione solo a nievl d App.js q allow saber si el reques fue hecho o no al servidor para obtener la data dl user actual\n  //La var local es 'iniciaApp' se ejecutara 1 vez y el metodo q va modificarla sera 'setIniciaApp' y dejamos en 'false' como valor inicial\n  //Como es 1 requests d ida y vuelta al servidor q indica q el user esta o no en sesion la hacemos como flag\n\n  const [iniciaApp, setIniciaApp] = useState(false); //Esta f nos permite ejecutar cierto codigo cuaando se haya cargado mi comp react\n\n  useEffect(() => {\n    //Si 'iniciaApp' es falso has esto\n    // A la f \"action\" 'obtenerUsuarioActual' le pasamos como param el 'dispatch', cuando me devuelva una respuesta 'then(response =>'\n    //Le indicamos a esta var q ya se inicio \"setIniciApp(true)\" 'iniciaApp' en true para q no vuelva a ejecutarse esta condicion\n    if (!iniciaApp) {\n      obtenerUsuarioActual(dispatch).then(response => {\n        setIniciaApp(true);\n      }).catch(error => {\n        setIniciaApp(true);\n      }); //sea error o exitoso siempre quiero q inicie.. por eso ambas condiciones van en true\n    } //Y solo evalua el cambio d valor d 'iniciaApp'\n\n  }, [iniciaApp]); //return iniciaApp === false ? null : (\n  //Posterior configuramos el react-router-dom q me permite la comunicacion entre diferentes comp react\n  // <Router> es la q me permite la navegacion entre diferentes comp\n  //\"openSnackbar\" es la data q guardamos a nivel global\n  //Cuando alguien cambie la data dl reducer \"openSnackbar\" sera 'true' y si update a false desaparecera\n  //open={openSnackbar ? openSnackbar.open : false} si \"openSnackbar existe\" so allows el estado de open else false\n  //autoHideDuration={3000} el tiempo d duracion en pantalla 3 segundos.\n  //ContentProps={{ \"aria-describedy\": \"message-id\" }} estilo dl texto snackbar\n  //openSnackbar este obj tiene 2 valores.. 1 valor 'open' q puede ser true o false y otro valor 'mensaje' q muestra el sms en pantalla\n  //Imprime un DOM virtual span  <span id=\"message-id\">\n  //  {openSnackbar ? openSnackbar.mensaje : \"\"} si existe muestra el mensaje else no muestres nada\n  //onClose={() => es el evento de cierre para q mate el proceso d autoHide\n  //\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n      },\n      open: openSnackbar ? openSnackbar.open : false,\n      autoHideDuration: 3000,\n      ContentProps: {\n        \"aria-describedy\": \"message-id\"\n      },\n      message: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"message-id\",\n        children: openSnackbar ? openSnackbar.mensaje : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this),\n      onClose: () => dispatch({\n        type: \"OPEN_SNACKBAR\",\n        openMensaje: {\n          open: false,\n          mensaje: \"\"\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(MuithemeProvider, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(AppNavbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/auth/login\",\n              component: Login\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/auth/registrar\",\n              component: RegistrarUsuario\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/auth/perfil\",\n              component: PerfilUsuario\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/\",\n              component: PerfilUsuario\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AvgCYC/Bemi0ON4J2vczYrcUCdA=\", false, function () {\n  return [useStateValue];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/ProyectoCoreb/cursos-online-app/src/App.js"],"names":["React","useEffect","useState","ThemeProvider","MuithemeProvider","theme","PerfilUsuario","Login","BrowserRouter","Router","Switch","Route","RegistrarUsuario","Grid","Snackbar","AppNavbar","useStateValue","obtenerUsuarioActual","App","sesionUsuario","openSnackbar","dispatch","iniciaApp","setIniciaApp","then","response","catch","error","vertical","horizontal","open","mensaje","type","openMensaje"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ThemeProvider as MuithemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./theme/theme\";\nimport PerfilUsuario from \"./componentes/seguridad/PerfilUsuario\";\nimport Login from \"./componentes/seguridad/Login\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport RegistrarUsuario from \"./componentes/seguridad/RegistrarUsuario\";\nimport { Grid, Snackbar } from \"@material-ui/core\";\nimport AppNavbar from \"./componentes/navegacion/AppNavbar\";\nimport { useStateValue } from \"./contexto/store\";\nimport { obtenerUsuarioActual } from \"./actions/UsuarioAction\";\n\n//import { BrowserRouter as Router, Switch, Route } Switch me permite cambiar las pag, Route es la ruta dl comp q se va cargar\nfunction App() {\n  //Dsps d estar en 'Index.js'obtenemos un valor d refer d mi sesion d usuario q ya exist en sesionUsuarioReducer y llamamos al obj dispatch\n  //E invok al 'useStateValue' q allow acceso a las var d sesion\n  //const [{ openSnackbar }, dispatch] = useStateValue(); refer d mi snackbar\n\n  const [{ sesionUsuario, openSnackbar }, dispatch] = useStateValue();\n\n\n  //Declaramos una var d estado LOCAL q funcione solo a nievl d App.js q allow saber si el reques fue hecho o no al servidor para obtener la data dl user actual\n  //La var local es 'iniciaApp' se ejecutara 1 vez y el metodo q va modificarla sera 'setIniciaApp' y dejamos en 'false' como valor inicial\n  //Como es 1 requests d ida y vuelta al servidor q indica q el user esta o no en sesion la hacemos como flag\n  const [iniciaApp, setIniciaApp] = useState(false);\n\n  //Esta f nos permite ejecutar cierto codigo cuaando se haya cargado mi comp react\n  useEffect(() => {\n    //Si 'iniciaApp' es falso has esto\n    // A la f \"action\" 'obtenerUsuarioActual' le pasamos como param el 'dispatch', cuando me devuelva una respuesta 'then(response =>'\n    //Le indicamos a esta var q ya se inicio \"setIniciApp(true)\" 'iniciaApp' en true para q no vuelva a ejecutarse esta condicion\n    if (!iniciaApp) {\n      obtenerUsuarioActual(dispatch)\n        .then((response) => {\n          setIniciaApp(true);\n        })\n        .catch((error) => {\n          setIniciaApp(true);\n        });\n      //sea error o exitoso siempre quiero q inicie.. por eso ambas condiciones van en true\n    }\n\n    //Y solo evalua el cambio d valor d 'iniciaApp'\n  }, [iniciaApp]);\n\n  //return iniciaApp === false ? null : (\n  //Posterior configuramos el react-router-dom q me permite la comunicacion entre diferentes comp react\n  // <Router> es la q me permite la navegacion entre diferentes comp\n  //\"openSnackbar\" es la data q guardamos a nivel global\n  //Cuando alguien cambie la data dl reducer \"openSnackbar\" sera 'true' y si update a false desaparecera\n  //open={openSnackbar ? openSnackbar.open : false} si \"openSnackbar existe\" so allows el estado de open else false\n  //autoHideDuration={3000} el tiempo d duracion en pantalla 3 segundos.\n  //ContentProps={{ \"aria-describedy\": \"message-id\" }} estilo dl texto snackbar\n  //openSnackbar este obj tiene 2 valores.. 1 valor 'open' q puede ser true o false y otro valor 'mensaje' q muestra el sms en pantalla\n  //Imprime un DOM virtual span  <span id=\"message-id\">\n  //  {openSnackbar ? openSnackbar.mensaje : \"\"} si existe muestra el mensaje else no muestres nada\n  //onClose={() => es el evento de cierre para q mate el proceso d autoHide\n  //\n  return (\n    <React.Fragment>\n      <Snackbar\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        open={openSnackbar ? openSnackbar.open : false}\n        autoHideDuration={3000}\n        ContentProps={{ \"aria-describedy\": \"message-id\" }}\n        message={\n          <span id=\"message-id\">\n            {openSnackbar ? openSnackbar.mensaje : \"\"}\n          </span>\n        }\n        onClose={() =>\n          dispatch({\n            type: \"OPEN_SNACKBAR\",\n            openMensaje: {\n              open: false,\n              mensaje: \"\",\n            },\n          })\n        }\n      ></Snackbar>\n      <Router>\n        {/*El param q va ingresar sera {theme} q definimos anteriromnt*/}\n        <MuithemeProvider theme={theme}>\n          {/*La barra siempre se mantendra sin importar el comp q vamos a ejecutar por eso como q la dejamos root*/}\n          <AppNavbar />\n\n          <Grid container>\n            {/* <Switch> me permite alternar entre diferents comp */}\n            <Switch>\n              <Route exact path=\"/auth/login\" component={Login} />\n              <Route\n                exact\n                path=\"/auth/registrar\"\n                component={RegistrarUsuario}\n              />\n              <Route exact path=\"/auth/perfil\" component={PerfilUsuario} />\n\n              {/*Para indicar q por defecto cuando cargue me abra el comp 'PerfilUsuario'*/}\n              <Route exact path=\"/\" component={PerfilUsuario} />\n            </Switch>\n          </Grid>\n        </MuithemeProvider>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}